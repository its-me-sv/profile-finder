{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","COLORS","Card","props","userObj","name","email","id","className","alt","src","CardList","CardArray","robots","map","uo","pos","Fragment","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","state","searchField","searchRobots","requestRobots","isPending","error","dispatch","onSearchChanged","event","text","target","value","payload","onRequestRobots","fetch","response","json","data","catch","useEffect","filteredBots","filter","robot","toLowerCase","includes","initialSearchState","initialRobotsState","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.472662c8.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\n\r\nconst COLORS = [\"green\", \"red\", \"yellow\", \"purple\", \"pink\", \"blue\", \"green\", \"blue\", \"red\", \"yellow\", \"purple\"];\r\n\r\nconst Card = (props) => {\r\n\tconst {name, email, id} = props.userObj;\r\n\treturn (\r\n\t\t<div className={`tc bg-light-${COLORS[id]} ba b--solid b--black bw2 shadow-7 grow ma3 dib br4 pa3`}>\r\n\t\t\t<img alt=\"images\" src={`https://robohash.org/${id}`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst CardArray = robots.map((uo, pos) => {\r\n\t\treturn (<React.Fragment key={uo.id}>\r\n\t\t\t\t\t<Card userObj={uo} />\r\n\t\t\t\t</React.Fragment>);\r\n\t});\r\n\treturn (<div>\r\n\t\t\t\t{CardArray}\r\n\t\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"tc pa3 ba b--solid bw2 br-pill b--black bg-lightest-blue\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Search Robots\"\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>);\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflow:\"scroll\",height:\"90vh\"}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChanged: event => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t};\r\n};\r\n\r\nfunction App(props){\r\n\t// constructor() {\r\n\t// \tsuper();\r\n\t// \tthis.state = {\r\n\t// \t\trobots: [],\r\n\t// \t\tsearchField: \"\"\r\n\t// \t}\r\n\t// }\r\n\t// const [robots, setRobots] = useState([]);\r\n\t// const [searchField, setSearchField] = useState(\"\");\r\n\t// componentDidMount() {\r\n\t// \tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t// \t.then(response => response.json())\r\n\t// \t.then(users => this.setState({robots:users}));\r\n\t// }\r\n\r\n\t//Alternate for componentDidMount()\r\n\tconst {onRequestRobots} = props;\r\n\t\r\n\tuseEffect(() => {\r\n\t\tonRequestRobots();\r\n\t}, [onRequestRobots]);\r\n\r\n\t// const onSearchChanged = (event) => {\r\n\t// \tsetSearchField(event.target.value);\r\n\t// }\r\n\tconst {searchField, onSearchChanged, robots, isPending} = props;\r\n\tconst filteredBots = robots.filter(robot => robot\r\n\t\t.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n\treturn isPending ? <h1>Its Loading</h1> :\r\n\t\t (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChanged}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredBots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t.then(response => response.json())\r\n\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n};","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialSearchState = {\r\n\tsearchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialSearchState, action = {}) => {\r\n\tswitch (action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst initialRobotsState = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialRobotsState, action = {}) => {\r\n\tswitch (action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true});\r\n\t\t\t// return {...state, ...{isPending: true}};\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\r\n\t\t\t// return {...state, ...{robots: action.payload, isPending: false}};\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\r\n\t\t\t// return {...state, ...{error: action.payload, isPending: false}};\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\n// import {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport {searchRobots, requestRobots} from './reducers';\r\n\r\n// const logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}